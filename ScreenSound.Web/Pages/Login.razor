@page "/login"
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthAPI AuthAPI;
@inject NavigationManager NavigationManager;
@attribute [AllowAnonymous]


<AuthorizeView>
    <Authorized>
        <p>Você está logado @context.User.Identity.Name</p>
    </Authorized>
    <NotAuthorized>
        <MudPaper Class="px-8 pt-2 pb-4 mx-16 my-8" Justify="Justify.Center">
            <MudForm>

                <MudTextField T="string" Label="Email" @bind-Value="email"
                              Variant="Variant.Outlined" Class="my-4"
                              Required="true" RequiredError="Email obrigatório!"
                              OnlyValidateIfDirty="true" />

                <MudTextField T="string" Label="Senha" @bind-Value="senha"
                              InputType="InputType.Password"
                              Variant="Variant.Outlined" Class="my-4"
                              Required="true" RequiredError="Senha obrigatória!"
                              OnlyValidateIfDirty="true" />

                <MudButton Variant="Variant.Filled" Color="Color.Primary"
                           Class="my-6" @onclick="FazerLogin">
                    Login
                </MudButton>

            </MudForm>
        </MudPaper>

    </NotAuthorized>
</AuthorizeView>



@code {
    private string? email;
    private string? senha;

    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }


    private async Task FazerLogin() {
        var resposta =  await AuthAPI.LoginAsync(email, senha);

        if (resposta.Sucesso)
        {
            if (ReturnUrl is not null)
            {
                NavigationManager.NavigateTo(ReturnUrl);
            }
            

        }
    }
}
